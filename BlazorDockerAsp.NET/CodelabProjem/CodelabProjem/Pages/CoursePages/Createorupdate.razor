@page "/course/createorupdate"
@page "/course/edit/{Id:int}"

@using Codelab.Models
@using Codelab.BLL.Contracts

@inject ICourseRepository _courseRepository
@inject NavigationManager _navigationManger
@inject IJSRuntime _jsRuntime

@attribute [Authorize] 
<h4>Kurs Ekle</h4>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <EditForm Model="courseModel" OnValidSubmit="CourseCreateOrUpdate">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group">
                    <label>Kurs İsmi:</label>
                    <InputText @bind-Value="courseModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Kurs Fiyatı:</label>
                    <InputNumber @bind-Value="courseModel.CoursePrice" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>courseModel.CoursePrice"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Kurs Açıklaması:</label>
                    <InputText @bind-Value="courseModel.Description" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.Description"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Kurs Başlık:</label>
                    <InputText @bind-Value="courseModel.Title" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.Title"></ValidationMessage>
                </div>
                <div class="form-group">
                    <button class="btn btn-success">Kurs Ekle</button>
                    <NavLink href="courselist" class="btn btn-danger">Kurs Listesine  Dön</NavLink>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }
    [Parameter]
    public int? Id { get; set; }

    private string Title { get; set; }
    private CourseDto courseModel { get; set; } = new CourseDto();
    protected override async Task OnInitializedAsync()


    {
        var authState = await State;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var url = new Uri(_navigationManger.Uri);
            _navigationManger.NavigateTo($"/Identity/account/login?returnUrl={url.LocalPath}");
        }


        if (Id != null)
        {
            Title = "Update";
            var data = await _courseRepository.GetCourse((int)Id);
            courseModel = data.Data;
        }
        else
        {
            //create
        }
    }
    private async Task CourseCreateOrUpdate()
    {
        try
        {
            if (Id != null)
            {
                var updateData = await _courseRepository.UpdateCourse((int)Id, courseModel);
                if (updateData.IsSuccess)
                    await _jsRuntime.ToastrSuccess(updateData.Message);
                else
                    await _jsRuntime.ToastrError(updateData.Message);
            }
            else
            {
                var created = await _courseRepository.CreateCourse(courseModel);
                if (created.IsSuccess)
                    await _jsRuntime.ToastrSuccess(created.Message);
                else
                    await _jsRuntime.ToastrError(created.Message);
            }
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message.ToString());
        }
    }
}
}


